---
layout: post
title:  "Trontlet, Development Snapshot"
date:   2017-10-6 16:58:38 -0500
categories: gamedev
excerpt: A quick snapshot of a snappy title coming to an arcade near you
---

**Completed**

The following are completed features, some described in greater detail than others.

***Basic FPS movement***

I implemented basic First Person Shooter movement for my game. There were several challenges that I faced here. I had to decide whether or not to use Unity's default first person controller. I decided to write my own, because their fps controller is fairly bloated and includes features that I wasn't planning on implementing. I wanted this game to feel more snappy like Unreal Tournament. Requiring a snappy control scheme meant that I couldn't use Rigidbodies for the main character because the force applied had to overcome the static friction of the floor, resulting in what ultimately felt like an input lag. I attempted implementing a movement system with just a collider and simple translation, but because translation is not truly continuous movement, at high enough speeds it allowed a player to move through walls without the collision being detected. This led me to use Unity's Character Controller Component, which seems to check collisions continuously thereby avoiding the walk-through-walls bug, and allowing for more precise control.

***Simple Maze Algorithm***

Based off of step by step descriptions of the Depth First Search (DFS) maze generation algorithm, I created my own using a basic unit called a 'Cell'.

Here is a Cell.

![cell]({{site.url}}/assets/gamedev/trontlet/1.png)

This is a grid generated with parameters width and length

![grid]({{site.url}}/assets/gamedev/trontlet/2.png)

This is the basic result of the DFS maze implementation that can examined [here][mazegen]. C# has a stack data type that made this rather easy to implement.

![maze]({{site.url}}/assets/gamedev/trontlet/3.png)

Here you can see I've added "Rooms" with random locations. The number of rooms can be controlled, as well as their size. These rooms could potentially spawn along the edge of the maze allowing a player a way to drop out of the maze.

![rooms]({{site.url}}/assets/gamedev/trontlet/4.png)

This is a larger maze test to show that my implmentation could handle mazes as large as I would need for the project. This was generated in under a second.

![stresstest]({{site.url}}/assets/gamedev/trontlet/5.png)

In order to prevent the player from dropping out of the maze, I created a buffer around the edge of the maze that rooms are not allowed to be. In this picture, I set the number of rooms very high to totally destroy all walls within the set of valid room locations. Also seen is my Level Exit being placed within the maze.

![margin]({{site.url}}/assets/gamedev/trontlet/6.png)

***Coin-Operated Gun and guncoin***
The gun the player can use in the game is a coin operated arcage cabinet inspired arcade token coin-shooter gun. It will launch coins that will turn into player-collectable items upon collision with a solid such as a wall or enemy. This transition between projectile and collectable should be almost instantaneous, and should be visually appealing. I wanted the coin to 'plink' off the wall and fly off in a semi-predictable way.  

![coinop]({{site.url}}/assets/gamedev/trontlet/7.gif)


***Continuous Experience***

I want the level loading experience to be seamless, so I've added a tunnel that the player will drop through at the end (and beginning) of each level.


**In Development**

These are features that I will be focusing on during the coming week.

***Basic Enemy with Dynamic Navigation Mesh***

A recently added bit of functionality in Unity, the dynamicly created and updated navmesh will allow me to generate a navmesh on the fly after my maze has been generated. I will be experimenting with this in the next few days.

**On the Horizon**

These are upcoming features.

***Future Enemies***

After building a basic placeholder enemy to eliminate any bugs with the basic logic, I will be making 3 distinct enemy types for this game. For more information please refer to the [Design Document][drive]

1. Swarm Enemy

    This will be a collection of enemies that will swarm towards the player on the ground, challenging the player with a ton of weak enemies.
2. Snake Enemy

    This enemy will move in the air at about eye-level, in discrete steps, similar to really basic implementations of the game Snake. If the player shoots segments of the snake, it will split into two snakes. Snakes will be able to freely move through walls towards the player, but will have a distinct sound that allows them to be semi-accurately located via sound.
3. Beholder

    I absolutely Love these three things:
    + Dungeons and Dragons
    + DOOM
    + Projectiles slow enough that you can dodge them if you pay attention
    
Although this Beholder may not be exactly the grinning fleshy stack of eyes we all know and love, I want to take a lot of the mechanics of the movement and projectile firing and give the player a more challenging enemy to fight that equally rewards them.


Until Next Time!




[mazegen]:https://github.com/lucasrumney94/trontlet/blob/master/trontlet/Assets/script/Maze.cs#L25
[drive]:https://docs.google.com/document/d/16rARsNw27a7206gDjVhmQs9HzPyZMSeyvsH-dwy_U3U/edit?usp=sharing
