---
layout: post
title:  "Game Dev: Kenney Game Jam"
date:   2017-8-27 16:58:38 -0500
categories: gamedev
---

**Project Goal and Rules**
In order to keep moving forward in game development I have decided to participate in a small jam called the [Kenney Game Jam][kenney]. The rules of the jam state that I could only use assets from the Kenney Asset Website. I made this small game in about 5 hours.

<iframe width="552" frameborder="0" height="167" src="https://itch.io/embed/171489"></iframe>



**Dev Log**
After considering what assets were available to me at the Kenney Asset Website, I decided to make a ship-based game. I have never before made a ship game. One of the challenges I knew I would have to consider is the 'feel' of the water and sailing physics, while also considering the limited time I had available for the jam. I would like to talk more about how I implemented the sailing.

Using a set of grass tiles from the Kenney Asset Pack that I hue-shifted to look like water, I instantiated a 100 by 100 grid, choosing random tiles and placing random islands along the way. The tiles all have mesh colliders so that the sea is a little more interesting to sail on, and because of their relatively simple geometry it wasn't too much of a perfomance impact. The ship itself has a capsule collider that sits above the keel at the 'water line' giving the impression that the boat is sailing. The tiles have a slippery and slightly bouny physics material applied to them to simulate a fake bouyancy effect.

![collider]({{site.url}}/assets/gamedev/collider.png)


The axes of control given to the user are two dimensional. The user can steer the boat left and right (yaw), and apply forward and backward (local Z axis) force. Pitch is controlled completely by the forces applied to the boat by gravity and the terrain, allowing the user to 'ramp' off of waves and land. With a long enough capsule collider I did not have to worry about the boat flipping along this axis.

The roll is probably the most interesting axis I had to deal with. Using the cross product of the global UP axis and the local UP axis I found a vector that was either positive or negative based on if the boat was rolling left or right. Applying this corrective torque (which is proportional to how rolled over the ship is) in the roll axis allowed the boat to seem like it was rolling upright in water. Testing was required to adjust both the torque and the angular drag on the boat to make sure its not under or over damped.

![correction]({{site.url}}/assets/gamedev/correction.gif =133x75)


**Hindsight**

Wish sea was less steep
Could have made tiles larger and used less and allowed them to animate without killing frames.
Sound could have been better implemented (or at all) if I hadn't have run into several bugs.
Does it make sense to sail backwards??

**Future**

Water Particles
Title Screen


[kenney]: https://itch.io/jam/kenney-jam-2017
